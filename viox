import React, { useState, useRef } from 'react';
import { Download, Image, Upload, Type, Sliders } from 'lucide-react';

export default function ProductImageGenerator() {
  const [productImage, setProductImage] = useState(null);
  const [websiteUrl, setWebsiteUrl] = useState('www.viox.com');
  const [productName, setProductName] = useState('Product Name');
  const [contactInfo, setContactInfo] = useState('09177110098-JOEY');
  const [borderColor, setBorderColor] = useState('#FFB800');
  const [textColor, setTextColor] = useState('#FFFFFF');
  const [companyName, setCompanyName] = useState('COMPANY NAME');
  const [description, setDescription] = useState('PRODUCT DESCRIPTION');
  const [generatedImage, setGeneratedImage] = useState(false);
  
  const canvasRef = useRef(null);
  
  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setProductImage(e.target.result);
        setGeneratedImage(false);
      };
      reader.readAsDataURL(file);
    }
  };
  
  const generateImage = () => {
    if (!productImage) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    
    // Set canvas dimensions
    canvas.width = 900;
    canvas.height = 1000;
    
    // Draw background (slightly darkened)
    ctx.fillStyle = '#222222';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Draw yellow border
    ctx.strokeStyle = borderColor;
    ctx.lineWidth = 20;
    ctx.strokeRect(30, 30, canvas.width - 60, canvas.height - 60);
    
    // Load and draw product image
    const img = new Image();
    img.onload = () => {
      // Calculate dimensions to maintain aspect ratio
      const maxWidth = canvas.width - 140;
      const maxHeight = canvas.height - 300;
      
      let width = img.width;
      let height = img.height;
      
      if (width > maxWidth) {
        height = (maxWidth / width) * height;
        width = maxWidth;
      }
      
      if (height > maxHeight) {
        width = (maxHeight / height) * width;
        height = maxHeight;
      }
      
      // Center the image
      const x = (canvas.width - width) / 2;
      const y = 120;
      
      // Draw the image
      ctx.drawImage(img, x, y, width, height);
      
      // Add company name on the side
      ctx.save();
      ctx.translate(70, canvas.height / 2);
      ctx.rotate(-Math.PI / 2);
      ctx.font = 'bold 36px Arial';
      ctx.fillStyle = textColor;
      ctx.textAlign = 'center';
      ctx.fillText(companyName, 0, 0);
      ctx.restore();
      
      // Add product description at the bottom
      ctx.fillStyle = borderColor;
      ctx.fillRect(30, canvas.height - 160, canvas.width - 60, 100);
      
      ctx.font = 'bold 48px Arial';
      ctx.fillStyle = textColor;
      ctx.textAlign = 'center';
      ctx.fillText(description, canvas.width / 2, canvas.height - 100);
      
      // Add contact info box
      ctx.fillStyle = borderColor;
      ctx.fillRect(canvas.width - 350, canvas.height - 240, 320, 60);
      
      ctx.font = 'bold 24px Arial';
      ctx.fillStyle = textColor;
      ctx.textAlign = 'center';
      ctx.fillText(contactInfo, canvas.width - 190, canvas.height - 205);
      
      // Add website URL at the top
      ctx.font = 'bold 24px Arial';
      ctx.fillStyle = textColor;
      ctx.textAlign = 'right';
      ctx.fillText(websiteUrl, canvas.width - 60, 70);
      
      setGeneratedImage(true);
    };
    img.src = productImage;
  };
  
  const downloadImage = () => {
    if (!generatedImage) return;
    
    const canvas = canvasRef.current;
    const dataURL = canvas.toDataURL('image/png');
    
    const link = document.createElement('a');
    link.download = `${productName.toLowerCase().replace(/\s+/g, '-')}.png`;
    link.href = dataURL;
    link.click();
  };
  
  return (
    <div className="flex flex-col min-h-screen bg-gray-100">
      <header className="bg-gray-800 text-white p-4">
        <h1 className="text-2xl font-bold">Product Image Generator</h1>
        <p className="text-gray-300">Create professional marketing images in one click</p>
      </header>
      
      <main className="flex flex-col md:flex-row flex-1 p-4 gap-6">
        <div className="w-full md:w-1/3 bg-white rounded-lg shadow p-4">
          <h2 className="text-xl font-bold mb-4 flex items-center">
            <Sliders className="mr-2" size={20} />
            Image Settings
          </h2>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                <Image className="inline mr-2" size={16} />
                Product Image
              </label>
              <div className="flex items-center justify-center w-full">
                <label className="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 hover:bg-gray-100">
                  <div className="flex flex-col items-center justify-center pt-5 pb-6">
                    <Upload className="w-8 h-8 mb-2 text-gray-500" />
                    <p className="mb-2 text-sm text-gray-500">
                      <span className="font-semibold">Click to upload</span> or drag and drop
                    </p>
                    <p className="text-xs text-gray-500">PNG, JPG or WEBP</p>
                  </div>
                  <input 
                    type="file" 
                    className="hidden" 
                    accept="image/*" 
                    onChange={handleImageUpload} 
                  />
                </label>
              </div>
              {productImage && (
                <div className="mt-2 relative h-32 bg-gray-100 rounded">
                  <img
                    src={productImage}
                    alt="Product preview"
                    className="h-full mx-auto object-contain"
                  />
                </div>
              )}
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                <Type className="inline mr-2" size={16} />
                Website URL
              </label>
              <input
                type="text"
                className="w-full p-2 border border-gray-300 rounded"
                value={websiteUrl}
                onChange={(e) => setWebsiteUrl(e.target.value)}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                <Type className="inline mr-2" size={16} />
                Product Name
              </label>
              <input
                type="text"
                className="w-full p-2 border border-gray-300 rounded"
                value={productName}
                onChange={(e) => setProductName(e.target.value)}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                <Type className="inline mr-2" size={16} />
                Company Name (Side Text)
              </label>
              <input
                type="text"
                className="w-full p-2 border border-gray-300 rounded"
                value={companyName}
                onChange={(e) => setCompanyName(e.target.value)}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                <Type className="inline mr-2" size={16} />
                Product Description (Bottom Text)
              </label>
              <input
                type="text"
                className="w-full p-2 border border-gray-300 rounded"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                <Type className="inline mr-2" size={16} />
                Contact Information
              </label>
              <input
                type="text"
                className="w-full p-2 border border-gray-300 rounded"
                value={contactInfo}
                onChange={(e) => setContactInfo(e.target.value)}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Border Color
              </label>
              <input
                type="color"
                className="w-full p-1 border border-gray-300 rounded h-10"
                value={borderColor}
                onChange={(e) => setBorderColor(e.target.value)}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Text Color
              </label>
              <input
                type="color"
                className="w-full p-1 border border-gray-300 rounded h-10"
                value={textColor}
                onChange={(e) => setTextColor(e.target.value)}
              />
            </div>
            
            <button
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
              onClick={generateImage}
              disabled={!productImage}
            >
              Generate Image
            </button>
          </div>
        </div>
        
        <div className="w-full md:w-2/3 bg-white rounded-lg shadow p-4">
          <h2 className="text-xl font-bold mb-4 flex items-center">
            <Image className="mr-2" size={20} />
            Preview
          </h2>
          
          <div className="flex flex-col items-center">
            <div className="relative bg-gray-200 rounded-lg overflow-hidden">
              <canvas
                ref={canvasRef}
                className="max-w-full h-auto"
              />
              {!generatedImage && (
                <div className="absolute inset-0 flex items-center justify-center">
                  {productImage ? (
                    <p className="text-gray-500">Click "Generate Image" to preview</p>
                  ) : (
                    <p className="text-gray-500">Upload a product image to get started</p>
                  )}
                </div>
              )}
            </div>
            
            {generatedImage && (
              <button
                className="mt-4 bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded flex items-center"
                onClick={downloadImage}
              >
                <Download className="mr-2" size={20} />
                Download Image
              </button>
            )}
          </div>
        </div>
      </main>
      
      <footer className="bg-gray-800 text-white p-4 text-center">
        <p>© 2025 Product Image Generator. All rights reserved.</p>
      </footer>
    </div>
  );
}
